/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ph.edu.slu.weavingpayrollapp.ui;

import java.rmi.RemoteException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.jdesktop.swingx.sort.RowFilters;
import ph.edu.slu.weavingpayrollapp.controllers.RMIController;
import weavingpayrollrmiserver.models.Employee;
import weavingpayrollrmiserver.interfaces.MainUIServer;

/**
 *
 * @author chris
 */
public class MainUI extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     */
    private MainUIServer mainUIServer = RMIController.getMainUIServer();
    private boolean adminActive = false;

    public MainUI() {
        initComponents();
        clockInBtn.setVisible(false);
        clockOutBnt.setVisible(false);
//        adminPane.setVisible(false);
        runTimer();
        try {
            this.syncTable();
        } catch (RemoteException ex) {
            ex.printStackTrace();
        }
    }

    private void runTimer() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        TimerTask timerTask = new TimerTask() {

            @Override
            public void run() {
                Date date = new Date();
                currentTimeField.setText(dateFormat.format(date));
            }
        };
        Timer timer = new Timer("textFieldTimer");//create a new Timer
        timer.scheduleAtFixedRate(timerTask, 30, 1000);//this line starts the timer at t
    }

    public void syncTable() throws RemoteException {
        table.getModel();
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        int counter = 0;
        HashMap<String, Employee> employees = mainUIServer.getEmployees();

        tm.setNumRows(employees.size());

        for (Map.Entry<String, Employee> entry : employees.entrySet()) {
            String key = entry.getKey();
            Employee value = entry.getValue();
            if (value.isActive()) {
                tm.setValueAt(value.getId(), counter, 0);
                tm.setValueAt(value.getFirstName(), counter, 1);
                tm.setValueAt(value.getLastName(), counter, 2);
                tm.setValueAt(value.isClockedIn() ? "In" : "Out", counter, 3);

                counter++;
            }
        }
        tm.setNumRows(counter);
        counter = 0;

        table.setModel(tm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clockOutBtn = new javax.swing.JPanel();
        clockInBtn = new javax.swing.JButton();
        clockOutBnt = new javax.swing.JButton();
        adminPane = new javax.swing.JPanel();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deActivateBtn = new javax.swing.JButton();
        reActivateBtn = new javax.swing.JButton();
        employeeSummaryBtn = new javax.swing.JButton();
        payrollBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        checkHoursBtn = new javax.swing.JButton();
        activateAdminBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jXButton1 = new org.jdesktop.swingx.JXButton();
        currentTimeField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new org.jdesktop.swingx.JXTable();
        jXMonthView1 = new org.jdesktop.swingx.JXMonthView();
        searchField = new org.jdesktop.swingx.JXSearchField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        clockOutBtn.setBackground(new java.awt.Color(255, 255, 255));

        clockInBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        clockInBtn.setText("Clock In");
        clockInBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clockInBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clockInBtnActionPerformed(evt);
            }
        });

        clockOutBnt.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        clockOutBnt.setText("Clock Out");
        clockOutBnt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clockOutBnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clockOutBntActionPerformed(evt);
            }
        });

        adminPane.setBackground(new java.awt.Color(255, 255, 255));

        addBtn.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        addBtn.setText("Add Employee");
        addBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        editBtn.setText("Edit Employee");
        editBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deActivateBtn.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        deActivateBtn.setText("De-Activate Employee");
        deActivateBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        deActivateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deActivateBtnActionPerformed(evt);
            }
        });

        reActivateBtn.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        reActivateBtn.setText("Re-Activate Employee");
        reActivateBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        reActivateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reActivateBtnActionPerformed(evt);
            }
        });

        employeeSummaryBtn.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        employeeSummaryBtn.setText("Employees");
        employeeSummaryBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        employeeSummaryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeSummaryBtnActionPerformed(evt);
            }
        });

        payrollBtn.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        payrollBtn.setText("Payroll");
        payrollBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        payrollBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payrollBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminPaneLayout = new javax.swing.GroupLayout(adminPane);
        adminPane.setLayout(adminPaneLayout);
        adminPaneLayout.setHorizontalGroup(
            adminPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminPaneLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(adminPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(adminPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deActivateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(adminPaneLayout.createSequentialGroup()
                        .addComponent(reActivateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(37, 37, 37)
                .addGroup(adminPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(payrollBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(employeeSummaryBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );
        adminPaneLayout.setVerticalGroup(
            adminPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deActivateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(employeeSummaryBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(adminPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reActivateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(payrollBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        checkHoursBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        checkHoursBtn.setText("Check My Hours");
        checkHoursBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkHoursBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkHoursBtnActionPerformed(evt);
            }
        });

        activateAdminBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        activateAdminBtn.setText("Activate Admin");
        activateAdminBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        activateAdminBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateAdminBtnActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton1.setText("Generate Payslip");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jXButton1.setText("Sync");
        jXButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jXButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkHoursBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                    .addComponent(jXButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(activateAdminBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkHoursBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activateAdminBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jXButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        currentTimeField.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        currentTimeField.setText("7:41");
        currentTimeField.setBorder(null);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "First Name", "Last Name", "Clocked In"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setEditable(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout clockOutBtnLayout = new javax.swing.GroupLayout(clockOutBtn);
        clockOutBtn.setLayout(clockOutBtnLayout);
        clockOutBtnLayout.setHorizontalGroup(
            clockOutBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clockOutBtnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clockOutBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                    .addComponent(searchField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(clockOutBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clockOutBtnLayout.createSequentialGroup()
                        .addGroup(clockOutBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(clockOutBtnLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(adminPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 8, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clockOutBtnLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jXMonthView1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clockOutBtnLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(currentTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(clockOutBtnLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clockInBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clockOutBnt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(139, 139, 139))))
        );
        clockOutBtnLayout.setVerticalGroup(
            clockOutBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clockOutBtnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clockOutBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(clockOutBtnLayout.createSequentialGroup()
                        .addComponent(adminPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(clockOutBtnLayout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(clockOutBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(clockOutBtnLayout.createSequentialGroup()
                                .addComponent(currentTimeField)
                                .addGap(18, 18, 18)
                                .addComponent(jXMonthView1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(clockOutBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(clockOutBnt, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(clockInBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(clockOutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(clockOutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clockInBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clockInBtnActionPerformed
        try {
            int selected = table.getSelectedRow();
            String id = (String) table.getModel().getValueAt(selected, 0);
            if (mainUIServer.clockIn(id)) {
                JOptionPane.showMessageDialog(this, "User clocked in..");
                syncTable();
            } else {
                JOptionPane.showMessageDialog(this, "Unable to clock user...");
            }

        } catch (RemoteException ex) {
            JOptionPane.showMessageDialog(this, "An error occured...");
        }

    }//GEN-LAST:event_clockInBtnActionPerformed

    private void clockOutBntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clockOutBntActionPerformed
        try {
            int selected = table.getSelectedRow();
            String id = (String) table.getModel().getValueAt(selected, 0);
            if (mainUIServer.clockOut(id)) {
                JOptionPane.showMessageDialog(this, "User clocked out..");
                syncTable();

            } else {
                JOptionPane.showMessageDialog(this, "Unable to clock user...");

            }

        } catch (RemoteException ex) {
            JOptionPane.showMessageDialog(this, "An error occured...");
        }
    }//GEN-LAST:event_clockOutBntActionPerformed

    private void activateAdminBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activateAdminBtnActionPerformed
        if (!adminActive) {
            JPasswordField pf = new JPasswordField();
            int okCxl = JOptionPane.showConfirmDialog(null, pf, "Enter Password", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

            if (okCxl == JOptionPane.OK_OPTION) {
                try {
                    String passwordStr = new String(pf.getPassword());
                    if (mainUIServer.authenticate(passwordStr)) {
                        adminPane.setVisible(true);
                        adminActive = true;
                        activateAdminBtn.setText("Deactivate Admin");
                    } else {
                        JOptionPane.showMessageDialog(this, "Wrong Password!");
                        activateAdminBtn.doClick();
                    }
                    String password = new String(pf.getPassword());
                    System.err.println("You entered: " + password);
                } catch (RemoteException ex) {
                    System.err.println(ex.getMessage());
                }
            }
        } else {
            // is admin
            adminPane.setVisible(false);
            adminActive = false;
            activateAdminBtn.setText("Activate Admin");

        }
    }//GEN-LAST:event_activateAdminBtnActionPerformed

    private void employeeSummaryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeSummaryBtnActionPerformed
        try {
            new Employees().setVisible(true);
        } catch (RemoteException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_employeeSummaryBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        try {
            int selected = table.getSelectedRow();
            String id = (String) table.getModel().getValueAt(selected, 0);
            Employee e = mainUIServer.getEmployees().get(id);
            new EditEmployee(e, this).setVisible(true);
            if (selected > -1) {
            } else {

            }
        } catch (RemoteException e) {
            System.err.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "No row was selected", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            int selected = table.getSelectedRow();
            String id = (String) table.getModel().getValueAt(selected, 0);
            Employee e = mainUIServer.getEmployees().get(id);
            new Payslip(e).setVisible(true);
            if (selected > -1) {
            } else {
            }
        } catch (RemoteException e) {
            System.err.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "No row was selected", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_jButton1ActionPerformed


    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        table.setRowFilter(RowFilters.regexFilter(Pattern.compile(searchField.getText())));

    }//GEN-LAST:event_searchFieldActionPerformed

    private void jXButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXButton1ActionPerformed
        try {
            syncTable();
        } catch (RemoteException ex) {
            System.err.println(ex.getMessage());
        }
    }//GEN-LAST:event_jXButton1ActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        new AddEmployee(this).setVisible(true);
    }//GEN-LAST:event_addBtnActionPerformed

    private void deActivateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deActivateBtnActionPerformed
        try {
            int selected = table.getSelectedRow();
            String id = (String) table.getModel().getValueAt(selected, 0);
            Employee e = mainUIServer.getEmployees().get(id);
            e.setActive(false);
            if (selected > -1) {
            } else {
            }
            mainUIServer.addEditEmployee(e);
            this.syncTable();
            JOptionPane.showMessageDialog(this, "Employee Deactivated..", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (RemoteException e) {
            System.err.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "No row was selected", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_deActivateBtnActionPerformed

    private void reActivateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reActivateBtnActionPerformed
        try {
            new ReactivateEmployee(this).setVisible(true);
        } catch (RemoteException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_reActivateBtnActionPerformed

    private void tableClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableClicked
        try {
            int selected = table.getSelectedRow();
            String id = (String) table.getModel().getValueAt(selected, 0);
            HashMap<String, Employee> employees = mainUIServer.getEmployees();
            System.out.println(id);
            if (selected > -1) {
                if (employees.get(id).isClockedIn()) {
                    clockInBtn.setVisible(false);
                    clockOutBnt.setVisible(true);
                } else if (!employees.get(id).isClockedIn()) {
                    clockInBtn.setVisible(true);
                    clockOutBnt.setVisible(false);
                } else {
                    clockInBtn.setVisible(false);
                    clockOutBnt.setVisible(false);
                }
            } else {
                clockInBtn.setVisible(false);
                clockOutBnt.setVisible(false);
            }
        } catch (RemoteException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_tableClicked

    private void payrollBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payrollBtnActionPerformed
        try {
            new PayrollForm(this).setVisible(true);
        } catch (RemoteException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_payrollBtnActionPerformed

    private void checkHoursBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkHoursBtnActionPerformed
        try {
            int selected = table.getSelectedRow();
            String id = (String) table.getModel().getValueAt(selected, 0);
            Employee e = mainUIServer.getEmployees().get(id);
            if (selected > -1) {
            } else {
            }
            JOptionPane.showMessageDialog(this, "You worked for "
                    + e.getDaysWorked() + " Hours",
                    "Total Hours", JOptionPane.INFORMATION_MESSAGE
            );
        } catch (RemoteException e) {
            System.err.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "No row was selected", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_checkHoursBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton activateAdminBtn;
    private javax.swing.JButton addBtn;
    private javax.swing.JPanel adminPane;
    private javax.swing.JButton checkHoursBtn;
    private javax.swing.JButton clockInBtn;
    private javax.swing.JButton clockOutBnt;
    private javax.swing.JPanel clockOutBtn;
    private javax.swing.JTextField currentTimeField;
    private javax.swing.JButton deActivateBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JButton employeeSummaryBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXButton jXButton1;
    private org.jdesktop.swingx.JXMonthView jXMonthView1;
    private javax.swing.JButton payrollBtn;
    private javax.swing.JButton reActivateBtn;
    private org.jdesktop.swingx.JXSearchField searchField;
    private org.jdesktop.swingx.JXTable table;
    // End of variables declaration//GEN-END:variables
}
